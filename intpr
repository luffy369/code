#include <iostream>
#include <stack>

using namespace std;

bool isOperator(char x) {
  switch (x) {
    case '+':
    case '-':
    case '*':
    case '/':
      return true;
    default:
      return false;
  }
}

int getPriority(char C) {
  if (C == '-' || C == '+') {
    return 1;
  } else if (C == '*' || C == '/') {
    return 2;
  } else if (C == '^') {
    return 3;
  }
  return 0;
}

string infixToPrefix(string infix) {
  stack<char> s;
  string prefix;

  for (int i = 0; i < infix.length(); i++) {
    char c = infix[i];

    if (isalpha(c)) {
      prefix += c;
    } else if (c == '(') {
      s.push(c);
    } else if (c == ')') {
      while (s.top() != '(') {
        prefix += s.top();
        s.pop();
      }
      s.pop();
    } else if (isOperator(c)) {
      while (!s.empty() && getPriority(s.top()) >= getPriority(c)) {
        prefix += s.top();
        s.pop();
      }
      s.push(c);
    }
  }

  while (!s.empty()) {
    prefix += s.top();
    s.pop();
  }

  return prefix;
}

int main() {
  string infix = "a + b + c";
  string prefix = infixToPrefix(infix);

  cout << "Prefix expression: " << prefix << endl;

  return 0;
}
